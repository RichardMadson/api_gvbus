/**
 * M√≥dulo de automa√ß√£o para extra√ß√£o de dados de cart√µes de transporte
 * Vers√£o H√≠brida - Combina abordagens para muitos e poucos cart√µes
 */

const { chromium } = require("playwright-chromium");

/**
 * Fun√ß√£o principal que tenta primeiro o m√©todo para muitos cart√µes
 * e, em caso de falha, utiliza o m√©todo para poucos cart√µes
 */
async function scrapTransportCards(username, password) {
  console.log(`[Scraper.js] üî∞ Iniciando automa√ß√£o de recarga para usu√°rio: ${username}`);
  console.log("[Scraper.js] ‚ÑπÔ∏è Usando abordagem h√≠brida (tentativa com dois m√©todos)");

  try {
    // Primeiro tenta o m√©todo para muitos cart√µes (Vers√£o 1.0)
    console.log("[Scraper.js] üîÑ Tentando m√©todo para muitos cart√µes (Vers√£o 1.0)");
    const dados = await scrapTransportCardsV1(username, password);
    console.log("[Scraper.js] ‚úÖ M√©todo para muitos cart√µes bem-sucedido");
    return dados;
  } catch (err) {
    // Se falhar, registra o erro e tenta o m√©todo para poucos cart√µes
    console.log("[Scraper.js] ‚ö†Ô∏è M√©todo para muitos cart√µes falhou:", err.message);
    console.log("[Scraper.js] üîÑ Tentando m√©todo alternativo para poucos cart√µes (Vers√£o 2.0)");

    try {
      const dados = await scrapTransportCardsV2(username, password);
      console.log("[Scraper.js] ‚úÖ M√©todo para poucos cart√µes bem-sucedido");
      return dados;
    } catch (err2) {
      console.error("[Scraper.js] ‚ùå Ambos os m√©todos falharam");
      console.error("[Scraper.js] ‚ùå Erro no m√©todo para poucos cart√µes:", err2.message);
      throw new Error(`Falha em ambos os m√©todos de extra√ß√£o: ${err2.message}`);
    }
  }
}

/**
 * M√©todo para muitos cart√µes (Vers√£o 1.0)
 * Otimizado para usu√°rios com muitos cart√µes cadastrados
 */
async function scrapTransportCardsV1(username, password) {
  const LOGIN_URL = "https://recargaonline.gvbus.org.br/frmLogin.aspx";
  const PEDIDO_URL =
    "https://recargaonline.gvbus.org.br/frmPedidoCargaIndividual.aspx?TituloMenu=Novo+pedido+de+carga&NumDias=0&InserePedido=s&FatorAnterior=0&ChaveGrupo=&ValorCarga=0&CodPedidoCopy=0&CodAnoCopy=";

  const TIMEOUT_PADRAO = 60000; // 60 segundos

  console.log(`[Scraper.js] [V1] üî∞ Iniciando m√©todo para muitos cart√µes: ${username}`);

  const browser = await chromium.launch({ headless: true });
  console.log("[Scraper.js] [V1] ‚úÖ Browser lan√ßado (headless)");

  const page = await browser.newPage();
  console.log("[Scraper.js] [V1] ‚úÖ Nova aba aberta");

  try {
    // 1) Login
    console.log(`[Scraper.js] [V1] ‚û°Ô∏è 1) Navegando at√© ${LOGIN_URL}`);
    await page.goto(LOGIN_URL, { waitUntil: "domcontentloaded", timeout: TIMEOUT_PADRAO });
    console.log("[Scraper.js] [V1] ‚úÖ P√°gina de login carregada");

    // 2) Aceita LGPD
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 2) Verificando modal de LGPD");
    const lgpdCheckbox = await page.$("#Toolbar_modalTermoAceiteLGPD input[type=checkbox]");
    if (lgpdCheckbox) {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Modal LGPD encontrado, aceitando...");
      await page.click("#Toolbar_modalTermoAceiteLGPD input[type=checkbox]");
      await page.waitForSelector("#Toolbar_modalTermoAceiteLGPD", { state: "hidden", timeout: 30000 });
      console.log("[Scraper.js] [V1]    ‚Ä¢ LGPD aceita");
    } else {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Modal LGPD n√£o apareceu");
    }

    // 3) Cookies
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 3) Fechando modal de cookies (se existir)");
    const btnCookies = await page.$("#modalPoliticaCookies input.button");
    if (btnCookies) {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Modal cookies encontrado, fechando...");
      await btnCookies.click();
      await page.waitForSelector("#modalPoliticaCookies", { state: "hidden", timeout: 30000 });
      console.log("[Scraper.js] [V1]    ‚Ä¢ Modal cookies fechado");
    } else {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Modal cookies n√£o apareceu");
    }

    // 4) Preenche credenciais
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 4) Preenchendo usu√°rio e senha");
    await page.waitForSelector("#txtEmailTitular", { timeout: TIMEOUT_PADRAO });
    await page.fill("#txtEmailTitular", username);
    console.log("[Scraper.js] [V1]     ‚Ä¢ Usu√°rio preenchido");
    await page.waitForSelector("#txtSenha", { timeout: TIMEOUT_PADRAO });
    await page.fill("#txtSenha", password);
    console.log("[Scraper.js] [V1]     ‚Ä¢ Senha preenchida");

    // 5) Submete login
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 5) Submetendo login");
    await Promise.all([
      page.click("#btnLogin"),
      page.waitForLoadState("networkidle", { timeout: TIMEOUT_PADRAO }),
    ]);
    console.log("[Scraper.js] [V1] ‚úÖ Login submetido e p√°gina estabilizada");

    // Verificar se o login foi bem-sucedido
    const loginError = await page.$("#lblErro");
    if (loginError && await loginError.isVisible()) {
        const errorMessage = await loginError.innerText();
        console.error(`[Scraper.js] [V1] ‚ùå Falha no login: ${errorMessage}`);
        throw new Error(`Falha no login na operadora: ${errorMessage.trim()}`);
    }

    // 6) Abre a p√°gina direta de Pedido de Carga
    console.log(`[Scraper.js] [V1] ‚û°Ô∏è 6) Navegando at√© Pedido de Carga: ${PEDIDO_URL}`);
    await page.goto(PEDIDO_URL, { waitUntil: "networkidle", timeout: TIMEOUT_PADRAO });
    console.log("[Scraper.js] [V1] ‚úÖ P√°gina de Pedido de Carga carregada");

    // 6.1) Verificar e fechar mensagem de erro se existir
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 6.1) Verificando se existe mensagem de erro para fechar");
    const errorOkButton = await page.$("#imgOK");
    if (errorOkButton) {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Mensagem de erro encontrada, fechando...");
      await errorOkButton.click();
      await page.waitForTimeout(1000); // Aguarda um segundo para a mensagem fechar completamente
      console.log("[Scraper.js] [V1]    ‚Ä¢ Mensagem de erro fechada com sucesso");
    } else {
      console.log("[Scraper.js] [V1]    ‚Ä¢ Nenhuma mensagem de erro encontrada");
    }

    // 7) Marcar "Exibir detalhes"
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 7) Clicando em Exibir detalhes");
    await page.waitForSelector("label[for=\"chkGrid\"]", { timeout: 30000 });
    await page.click("label[for=\"chkGrid\"]");
    console.log("[Scraper.js] [V1] ‚úÖ Exibir detalhes marcado");

    // 8) Esperar pela tabela - TIMEOUT REDUZIDO PARA FALHAR MAIS R√ÅPIDO SE NECESS√ÅRIO
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 8) Aguardando tabela de funcion√°rios");
    // Reduzimos o timeout para 30 segundos para falhar mais r√°pido se necess√°rio
    await page.waitForSelector("table#gridPedidos tbody tr", { timeout: 30000 });
    console.log("[Scraper.js] [V1] ‚úÖ Tabela carregada");

    // 9) Extrair dados
    console.log("[Scraper.js] [V1] ‚û°Ô∏è 9) Extraindo dados das linhas");
    const rows = await page.$$("table#gridPedidos tbody tr.trNormal, table#gridPedidos tbody tr.trNormal_impar");

    // Se n√£o encontrou linhas, lan√ßa erro para tentar o m√©todo alternativo
    if (rows.length === 0) {
      console.log("[Scraper.js] [V1] ‚ö†Ô∏è Nenhuma linha encontrada com seletor espec√≠fico");
      throw new Error("Nenhuma linha encontrada na tabela com seletor espec√≠fico");
    }

    const dados = [];
    for (const [i, row] of rows.entries()) {
      console.log(`[Scraper.js] [V1]    ‚Ä¢ Processando linha ${i + 1}`);
      try {
        const [cardNumber, employeeId, employeeName, balanceText] = await row.$$eval(
          "td",
          (tds) => tds.slice(0, 4).map((td) => td.innerText.trim())
        );

        // Valida√ß√£o b√°sica dos dados
        if (!cardNumber || !employeeId || !employeeName) {
          console.log(`[Scraper.js] [V1]    ‚Ä¢ Linha ${i + 1} com dados incompletos, pulando`);
          continue;
        }

        // Tratamento do saldo
        let balance = 0;
        if (balanceText) {
          try {
            balance = parseFloat(balanceText.replace(/\./g, "").replace(",", "."));
            if (isNaN(balance)) {
              console.log(`[Scraper.js] [V1]    ‚Ä¢ Saldo inv√°lido para cart√£o ${cardNumber}: "${balanceText}"`);
              balance = 0;
            }
          } catch (err) {
            console.log(`[Scraper.js] [V1]    ‚Ä¢ Erro ao converter saldo para cart√£o ${cardNumber}: "${balanceText}"`);
            balance = 0;
          }
        }

        dados.push({ cardNumber, employeeId, employeeName, balance });
      } catch (err) {
        console.log(`[Scraper.js] [V1]    ‚Ä¢ Erro ao processar linha ${i + 1}: ${err.message}`);
        // Continua para a pr√≥xima linha
      }
    }

    console.log(`[Scraper.js] [V1] ‚úÖ Dados extra√≠dos: ${dados.length} registros`);

    // Se n√£o extraiu nenhum dado, lan√ßa erro para tentar o m√©todo alternativo
    if (dados.length === 0) {
      console.log("[Scraper.js] [V1] ‚ö†Ô∏è Nenhum dado extra√≠do da tabela");
      throw new Error("Nenhum dado extra√≠do da tabela");
    }

    return dados; // Retorna os dados extra√≠dos

  } catch (err) {
    console.error("[Scraper.js] [V1] ‚ùå Erro durante a automa√ß√£o:", err.message);
    // Propaga o erro para ser tratado pelo m√©todo h√≠brido
    throw err;
  } finally {
    if (browser) {
      await browser.close();
      console.log("[Scraper.js] [V1] üîí Browser fechado");
    }
  }
}

/**
 * M√©todo para poucos cart√µes (Vers√£o 2.0)
 * Otimizado para usu√°rios com poucos cart√µes cadastrados
 */
async function scrapTransportCardsV2(username, password) {
  const LOGIN_URL = "https://recargaonline.gvbus.org.br/frmLogin.aspx";
  const PEDIDO_URL =
    "https://recargaonline.gvbus.org.br/frmPedidoCargaIndividual.aspx?TituloMenu=Novo+pedido+de+carga&NumDias=0&InserePedido=s&FatorAnterior=0&ChaveGrupo=&ValorCarga=0&CodPedidoCopy=0&CodAnoCopy=";

  const DEFAULT_TIMEOUT = 30000; // 30 segundos para opera√ß√µes padr√£o
  const EXTENDED_TIMEOUT = 60000; // 60 segundos para opera√ß√µes cr√≠ticas

  console.log(`[Scraper.js] [V2] üî∞ Iniciando m√©todo para poucos cart√µes: ${username}`);

  const browser = await chromium.launch({ headless: true });
  console.log("[Scraper.js] [V2] ‚úÖ Browser lan√ßado (headless)");

  const page = await browser.newPage();
  console.log("[Scraper.js] [V2] ‚úÖ Nova aba aberta");

  try {
    // 1) Login
    console.log(`[Scraper.js] [V2] ‚û°Ô∏è 1) Navegando at√© ${LOGIN_URL}`);
    await page.goto(LOGIN_URL, { waitUntil: "domcontentloaded", timeout: EXTENDED_TIMEOUT });
    console.log("[Scraper.js] [V2] ‚úÖ P√°gina de login carregada");

    // 2) Aceita LGPD
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 2) Verificando modal de LGPD");
    const lgpdCheckbox = await page.$("#Toolbar_modalTermoAceiteLGPD input[type=checkbox]");
    if (lgpdCheckbox) {
      console.log("[Scraper.js] [V2]    ‚Ä¢ Modal LGPD encontrado, aceitando...");
      await page.click("#Toolbar_modalTermoAceiteLGPD input[type=checkbox]");
      await page.waitForSelector("#Toolbar_modalTermoAceiteLGPD", { state: "hidden", timeout: DEFAULT_TIMEOUT });
      console.log("[Scraper.js] [V2]    ‚Ä¢ LGPD aceita");
    } else {
      console.log("[Scraper.js] [V2]    ‚Ä¢ Modal LGPD n√£o apareceu");
    }

    // 3) Cookies
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 3) Fechando modal de cookies (se existir)");
    const cookiesBtn = await page.$("#modalPoliticaCookies input.button");
    if (cookiesBtn) {
      console.log("[Scraper.js] [V2]    ‚Ä¢ Modal cookies encontrado, fechando...");
      await cookiesBtn.click();
      await page.waitForSelector("#modalPoliticaCookies", { state: "hidden", timeout: DEFAULT_TIMEOUT });
      console.log("[Scraper.js] [V2]    ‚Ä¢ Modal cookies fechado");
    } else {
      console.log("[Scraper.js] [V2]    ‚Ä¢ Modal cookies n√£o apareceu");
    }

    // 4) Preenche credenciais
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 4) Preenchendo usu√°rio e senha");
    try {
      await page.waitForSelector("#txtEmailTitular", { state: 'visible', timeout: DEFAULT_TIMEOUT });
      await page.fill("#txtEmailTitular", username);
      console.log("[Scraper.js] [V2]    ‚Ä¢ Usu√°rio preenchido");

      await page.waitForSelector("#txtSenha", { state: 'visible', timeout: DEFAULT_TIMEOUT });
      await page.fill("#txtSenha", password);
      console.log("[Scraper.js] [V2]    ‚Ä¢ Senha preenchida");
    } catch (err) {
      throw new Error(`Falha ao preencher credenciais: ${err.message}`);
    }

    // 5) Submete login
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 5) Submetendo login");
    try {
      await Promise.all([
        page.click("#btnLogin"),
        page.waitForLoadState("networkidle", { timeout: EXTENDED_TIMEOUT }),
      ]);

      // 5.1) Verifica poss√≠vel erro de login
      if (await page.$("#lblErro")) {
        const errorMessage = await page.$eval("#lblErro", (el) => el.innerText.trim());
        console.error(`[Scraper.js] [V2] ‚ùå Falha no login: ${errorMessage}`);
        throw new Error(`Falha no login na operadora: ${errorMessage}`);
      }
      console.log("[Scraper.js] [V2] ‚úÖ Login bem-sucedido e p√°gina estabilizada");
    } catch (err) {
      if (!err.message.includes("Falha no login na operadora")) {
        err.message = `Erro durante submiss√£o do login: ${err.message}`;
      }
      throw err;
    }

    // 6) Abre a p√°gina direta de Pedido de Carga
    console.log(`[Scraper.js] [V2] ‚û°Ô∏è 6) Navegando at√© Pedido de Carga: ${PEDIDO_URL}`);
    try {
      await page.goto(PEDIDO_URL, { waitUntil: "networkidle", timeout: EXTENDED_TIMEOUT });
      await page.waitForSelector("table#gridPedidos", { state: 'visible', timeout: EXTENDED_TIMEOUT });
      console.log("[Scraper.js] [V2] ‚úÖ P√°gina de Pedido de Carga carregada");
    } catch (err) {
      throw new Error(`Falha ao carregar p√°gina de Pedido de Carga: ${err.message}`);
    }

    // 7) Marcar "Exibir detalhes"
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 7) Clicando em Exibir detalhes");
    try {
      await page.check("#chkGrid");
      await page.waitForTimeout(1000); // Aumentado para 1 segundo para garantir atualiza√ß√£o da tabela
      console.log("[Scraper.js] [V2] ‚úÖ Exibir detalhes marcado");
    } catch (err) {
      console.log(`[Scraper.js] [V2] ‚ö†Ô∏è Falha ao marcar "Exibir detalhes": ${err.message}`);
      // Continua mesmo com falha, pois pode ser que j√° esteja marcado
    }

    // 8) Esperar pela tabela
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 8) Aguardando tabela de funcion√°rios");
    try {
      await page.waitForSelector("table#gridPedidos tbody tr", { state: 'visible', timeout: EXTENDED_TIMEOUT });

      // 8.1) Log de quantas linhas encontrou
      const totalRows = await page.$$eval(
        "table#gridPedidos tbody tr",
        (trs) => trs.length
      );

      if (totalRows <= 1) {
        console.log("[Scraper.js] [V2] ‚ö†Ô∏è Tabela carregada, mas apenas com cabe√ßalho ou vazia");

        // Verificar se a √∫nica linha √© o cabe√ßalho
        const isTitleOnly = await page.evaluate(() => {
          const rows = document.querySelectorAll("table#gridPedidos tbody tr");
          return rows.length === 1 && rows[0].classList.contains('trTitulo');
        });

        if (isTitleOnly) {
          console.log("[Scraper.js] [V2] ‚ÑπÔ∏è Tabela cont√©m apenas o cabe√ßalho, sem dados");
          return [];
        }
      }

      console.log(`[Scraper.js] [V2] ‚öôÔ∏è Encontradas ${totalRows} linhas no tbody`);
      console.log("[Scraper.js] [V2] ‚úÖ Tabela carregada");
    } catch (err) {
      throw new Error(`Falha ao aguardar tabela de funcion√°rios: ${err.message}`);
    }

    // 9) Extrair dados de forma robusta
    console.log("[Scraper.js] [V2] ‚û°Ô∏è 9) Extraindo dados das linhas");
    try {
      const dados = await page.$$eval(
        "table#gridPedidos tbody tr",
        (rows) =>
          Array.from(rows)
            .filter(row => !row.classList.contains('trTitulo')) // Excluir linha de cabe√ßalho
            .map((row) => {
              try {
                const tds = Array.from(row.querySelectorAll("td"));
                if (tds.length < 4) return null;

                const [cardNumber, employeeId, employeeName, balanceText] = tds
                  .slice(0, 4)
                  .map((td) => td.textContent.trim());

                // Valida√ß√£o dos campos obrigat√≥rios
                if (!cardNumber || !employeeId || !employeeName) return null;

                // Tratamento robusto para o saldo
                let balance = 0;
                if (balanceText) {
                  try {
                    balance = parseFloat(
                      balanceText.replace(/\./g, "").replace(",", ".")
                    );

                    // Verifica se o resultado √© um n√∫mero v√°lido
                    if (isNaN(balance)) {
                      console.warn(`Saldo inv√°lido para cart√£o ${cardNumber}: "${balanceText}"`);
                      balance = 0;
                    }
                  } catch (err) {
                    console.warn(`Erro ao converter saldo para cart√£o ${cardNumber}: "${balanceText}"`);
                    balance = 0;
                  }
                }

                return { cardNumber, employeeId, employeeName, balance };
              } catch (err) {
                console.warn(`Erro ao processar linha da tabela: ${err.message}`);
                return null;
              }
            })
            .filter(Boolean) // Remover itens nulos
      );

      console.log(`[Scraper.js] [V2] ‚úÖ Dados extra√≠dos: ${dados.length} registros`);
      return dados; // Retorna os dados extra√≠dos
    } catch (err) {
      throw new Error(`Falha ao extrair dados da tabela: ${err.message}`);
    }

  } catch (err) {
    console.error("[Scraper.js] [V2] ‚ùå Erro durante a automa√ß√£o:", err.message);
    // Propaga o erro para ser tratado pelo m√©todo h√≠brido
    throw err;
  } finally {
    if (browser) {
      await browser.close();
      console.log("[Scraper.js] [V2] üîí Browser fechado");
    }
  }
}

module.exports = { scrapTransportCards };
